DROP TABLE IF EXISTS USERS, TASK, ROLES, USER_ROLES, COMMENTS;

CREATE TABLE IF NOT EXISTS USERS(
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS ROLES(
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name VARCHAR(16) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS USER_ROLES(
    user_id BIGINT,
    role_id BIGINT,
    CONSTRAINT USER_ROLES_USER_ID_FK FOREIGN KEY (user_id) REFERENCES USERS(id),
    CONSTRAINT TUSER_ROLES_ROLE_ID_FK FOREIGN KEY (role_id) REFERENCES ROLES(id)
);

INSERT INTO ROLES(name) values ('ROLE_USER');

CREATE TABLE IF NOT EXISTS TASK(
id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
title VARCHAR(255) NOT NULL,
description VARCHAR(512) NOT NULL,
status VARCHAR(16) NOT NULL DEFAULT 'NEW',
priority VARCHAR(16) NOT NULL DEFAULT 'NORMAL',
author  BIGINT NOT NULL,
executor BIGINT,

CONSTRAINT TASK_AUTHOR_ID_FK FOREIGN KEY (author) REFERENCES USERS(id) ON UPDATE RESTRICT ON DELETE CASCADE,
CONSTRAINT TASK_EXECUTOE_ID_FK FOREIGN KEY (executor) REFERENCES USERS(id)
);

CREATE TABLE IF NOT EXISTS COMMENTS(
id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
text VARCHAR(2048) NOT NULL,
author_id  BIGINT NOT NULL,
task_id BIGINT NOT NULL,

CONSTRAINT COMMENT_AUTHOR_ID_FK FOREIGN KEY (author_id) REFERENCES USERS(id),
CONSTRAINT COMMENT_TASK_ID_FK FOREIGN KEY (task_id) REFERENCES TASK(id) ON UPDATE RESTRICT ON DELETE CASCADE
);